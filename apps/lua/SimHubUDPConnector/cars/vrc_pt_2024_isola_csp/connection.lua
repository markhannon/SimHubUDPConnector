carId = ac.getCarID(0)
ECU_Isola = ac.connect({
    ac.StructItem.key(carId .. "_ecu_" .. 0),
    connected = ac.StructItem.boolean(),
    collisionDepth = ac.StructItem.float(),
    collidedWith = ac.StructItem.int16(),
    displayPage = ac.StructItem.int16(),
    requestedEngineRPM = ac.StructItem.float(),
    throttleBodyPosition = ac.StructItem.float(),
    requestedThrottleBodyPosition = ac.StructItem.float(),
    deploymentStrat = ac.StructItem.float(),
    pedalMap = ac.StructItem.int16(),
    torqueMap = ac.StructItem.int16(),
    torqueSplit = ac.StructItem.int16(),
    fuelUsedLastLap = ac.StructItem.float(),
    kersTorqueLevel = ac.StructItem.float(),
    kersFrontMotorActive = ac.StructItem.boolean(),
    kersFrontMotorPerc = ac.StructItem.float(),
    kersInput = ac.StructItem.float(),
    kersMinSpeedKmh = ac.StructItem.float(),
    kersMaxSpeedKmh = ac.StructItem.float(),
    stintMaxEnergyMJ = ac.StructItem.float(),
    stintEnergyMJ = ac.StructItem.float(),
    stintEnergyMJLap = ac.StructItem.float(),
    stintEstimatedLapsRemaining = ac.StructItem.float(),
    stintLapsCompleted = ac.StructItem.float(),
    currentEnergyMJPerLap = ac.StructItem.float(),
    virtualEnergyTankMJ = ac.StructItem.float(),
    virtualEnergyTank = ac.StructItem.float(),
    brakeBiasCoarse = ac.StructItem.float(),
    brakeBiasFine = ac.StructItem.float(),
    brakeBiasLive = ac.StructItem.float(),
    brakeBiasPeak = ac.StructItem.float(),
    brakeMigration = ac.StructItem.float(),
    mgukRecovery = ac.StructItem.float(),
    recoveryLevel = ac.StructItem.float(),
    brakeLevel = ac.StructItem.float(),
    tcSlipSetting = ac.StructItem.int16(),
    tcCutSetting = ac.StructItem.int16(),
    tcCut = ac.StructItem.float(),
    tcTargetSlip = ac.StructItem.float(),
    tcPickupSetting = ac.StructItem.int16(),
    tcExitSetting = ac.StructItem.int16(),
    engineBrakeSetting = ac.StructItem.int16(),
    antirollBarFrontPosition = ac.StructItem.int16(),
    antirollBarRearPosition = ac.StructItem.int16(),
    isTCActive = ac.StructItem.boolean(),
    isAntistallActive = ac.StructItem.boolean(),
    isEngineStalled = ac.StructItem.boolean(),
    isEngineStarted = ac.StructItem.boolean(),
    isEngineRunning = ac.StructItem.boolean(),
    isStarterCranking = ac.StructItem.boolean(),
    isIgnitionOn = ac.StructItem.boolean(),
    isElectronicsBooted = ac.StructItem.boolean(),
    isKersOvertakeActive = ac.StructItem.boolean(),
    isPitSpeedLimiterActive = ac.StructItem.boolean(),
}, true, ac.SharedNamespace.CarScript)
ECU_Isola_fields = {
    "connected", "collisionDepth", "collidedWith", "displayPage", "requestedEngineRPM", "throttleBodyPosition",
    "requestedThrottleBodyPosition", "deploymentStrat", "pedalMap", "torqueMap", "torqueSplit", "fuelUsedLastLap",
    "kersTorqueLevel", "kersFrontMotorActive", "kersFrontMotorPerc", "kersInput", "kersMinSpeedKmh",
    "kersMaxSpeedKmh",
    "stintMaxEnergyMJ", "stintEnergyMJ", "stintEnergyMJLap", "stintEstimatedLapsRemaining", "stintLapsCompleted",
    "currentEnergyMJPerLap", "virtualEnergyTankMJ", "virtualEnergyTank", "brakeBiasCoarse", "brakeBiasFine",
    "brakeBiasLive",
    "brakeBiasPeak", "brakeMigration", "mgukRecovery", "recoveryLevel", "brakeLevel", "tcSlipSetting", "tcCutSetting",
    "tcCut",
    "tcTargetSlip", "tcPickupSetting", "tcExitSetting", "engineBrakeSetting", "antirollBarFrontPosition",
    "antirollBarRearPosition",
    "isTCActive", "isAntistallActive", "isEngineStalled", "isEngineStarted", "isEngineRunning", "isStarterCranking",
    "isIgnitionOn",
    "isElectronicsBooted", "isKersOvertakeActive", "isPitSpeedLimiterActive",
}

SENSORS_Isola = ac.connect({
    ac.StructItem.key(carId .. "_sensors_" .. 0),
    connected = ac.StructItem.boolean(),
    clutchPedal = ac.StructItem.float(),
    brakePedal = ac.StructItem.float(),
    gasPedal = ac.StructItem.float(),
    clutch = ac.StructItem.float(),
    gas = ac.StructItem.float(),
    neutralGear = ac.StructItem.boolean(),
    powerUnitTorque = ac.StructItem.float(),
    powerUnitDischargeMJ = ac.StructItem.float(),
    engineBaseTorque = ac.StructItem.float(),
    engineTorque = ac.StructItem.float(),
    engineTorqueMax = ac.StructItem.float(),
    fuelConsumption = ac.StructItem.float(),
    boostTorque = ac.StructItem.float(),
    kersTorque = ac.StructItem.float(),
    kersTorqueMax = ac.StructItem.float(),
    kersCoastTorque = ac.StructItem.float(),
    kersCoastTorqueMax = ac.StructItem.float(),
    kersRegenMJ = ac.StructItem.float(),
    kersDischargeMJ = ac.StructItem.float(),
    kersChargingEnergyStore = ac.StructItem.boolean(),
    drivetrainTorque = ac.StructItem.float(),
    throttleBodyPosition = ac.StructItem.float(),
    rearDifferentialPower = ac.StructItem.float(),
    rearDifferentialCoast = ac.StructItem.float(),
    rearDifferentialPreload = ac.StructItem.int16(),
}, true, ac.SharedNamespace.CarScript)
SENSORS_Isola_fields = {
    "connected", "clutchPedal", "brakePedal", "gasPedal", "clutch",
    "gas", "neutralGear", "powerUnitTorque", "powerUnitDischargeMJ",
    "engineBaseTorque", "engineTorque", "engineTorqueMax", "fuelConsumption",
    "boostTorque", "kersTorque", "kersTorqueMax", "kersCoastTorque", "kersCoastTorqueMax",
    "kersRegenMJ", "kersDischargeMJ", "kersChargingEnergyStore", "drivetrainTorque", "throttleBodyPosition",
    "rearDifferentialPower", "rearDifferentialCoast", "rearDifferentialPreload"
}

carScript = function (customData)
    addAllData(ECU_Isola, ECU_Isola_fields, 'ECU_', customData)
    addAllData(SENSORS_Isola, SENSORS_Isola_fields, 'Sensors_', customData)
end